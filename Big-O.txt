-------------------------------------------------------------------------------------------------------------------

Objects:

Insertion - O(1)
Deletion - O(1)
Searching - O(N)
Access - O(1)
Object.keys() - O(N)
Object.values() - O(N)
Object.entries() - O(N)
Object.hasOwnProperty() - O(N)

-------------------------------------------------------------------------------------------------------------------

Arrays:

Insertion - Depende on where we are inserting
	O(1) -> Adding at last index
	O(N) -> Adding at first index
Deletion - Depende on where we are deleting
	O(1) -> Deleting at last index
	O(N) -> Deleting at first index
Searching - O(N)
Access - O(1)
Array.push() - O(1)
Array.pop() - O(1)
Array.shift() - O(N)
Array.shift() - O(N)
Array.unshift() - O(N)
Array.concat() - O(N)
Array.splice() - O(N)
Array.slice() - O(N)
Array.sort() - O(N*log(N))
Array.forEach()/map()/filter()/reduce() - O(N)

-------------------------------------------------------------------------------------------------------------------

Linear Search:

Best case: O(1) -> Element to be searched is at first index
Average case: O(N) -> Element to be searched is not at first index
Worst case: O(N) -> Element to be searched is not at first index

-------------------------------------------------------------------------------------------------------------------

Binary Search:

Best case: O(1) -> Element to be searched is at first index
Average case: O(log(N)) -> Element to be searched is not at first index
Worst case: O(log(N)) -> Element to be searched is not at first index

-------------------------------------------------------------------------------------------------------------------

Bubble Sort:

General - O(N^2)
Almost Sorted/Sorted Array - O(N)

-------------------------------------------------------------------------------------------------------------------

Selection Sort:

General - O(N^2)
Better than bubble sort if you want to remove number of swaps

-------------------------------------------------------------------------------------------------------------------

Insertion Sort:

General - O(N^2)
Almost Sorted/Sorted Array - O(N)

-------------------------------------------------------------------------------------------------------------------

Merge Sort:

Best/Average/Worst - O(N*log(N))
Space Complexity - O(N)

-------------------------------------------------------------------------------------------------------------------

Quick Sort:

Best/Average - O(N*log(N))
Worst - O(N^2)
Space Complexity - O(log(N))

-------------------------------------------------------------------------------------------------------------------

Radix Sort:

Best/Average/Worst - O(N*K)
Space Complexity - O(N+K)
K -> Length of max number

-------------------------------------------------------------------------------------------------------------------


Singly Linked List:

Insertion - O(1)
Deletion - Depende on where it is removed
	O(1) -> Element removed from start
	O(N) -> Element removed from last
Searching - O(N)
Access - O(N)

-------------------------------------------------------------------------------------------------------------------

Doubly Linked List:

Insertion - O(1)
Deletion - O(1)
Searching - O(N)
Access - O(N)

-------------------------------------------------------------------------------------------------------------------

Stack:

Insertion - O(1)
Deletion - O(1)
Searching - O(N)
Access - O(N)

-------------------------------------------------------------------------------------------------------------------

Queue:

Insertion - O(1)
Deletion - O(1)
Searching - O(N)
Access - O(N)

-------------------------------------------------------------------------------------------------------------------

Binary Search Tree:

Insertion - O(log(N))
Searching - O(log(N))

-------------------------------------------------------------------------------------------------------------------

Binary Heap:

Insertion - O(log(N))
Removal - O(log(N))
Searching - O(N)

-------------------------------------------------------------------------------------------------------------------

Hash Table:

Insertion - O(1)
Removal - O(1)
Access - O(1)

-------------------------------------------------------------------------------------------------------------------

Graphs:

Adjacancy List				|			Adjacancy Matrix	
					|
Add Vertex - O(1)			|			Add Vertex - O(|V^2|)
Add Edge - O(1)				|			Add Edge - O(1)
Remove Vertex - O(|V|+|E|)		|			Remove Vertex - O(|V^2|)
Remove Edge - O(|E|)			|			Remove Edge - O(1)
Query - O(|V|+|E|)			|			Query - O(1)
Storage - O(|V|+|E|)			|			Storage - O(|V^2|)

|V| -> Number of Vertices
|E| -> Number of Edges
-------------------------------------------------------------------------------------------------------------------

